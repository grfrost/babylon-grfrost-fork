#!/usr/bin/env java --enable-preview --source 24 
/*
 * Copyright (c) 2024, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

import module java.compiler;

void main(String[] args) throws IOException, InterruptedException {
     var pwdDir = Path.of(System.getProperty("user.dir"));
     var toolsDir = pwdDir.resolve("bldr");
     var classesDir = toolsDir.resolve("classes");
     var sourcePath = toolsDir.resolve("src/main/java");

     if (Files.exists(classesDir)) {
        Files.walk(classesDir).sorted(Comparator.reverseOrder()).map(Path::toFile).forEach(File::delete);
     }
     Files.createDirectories(classesDir);

     var src = new ArrayList<Path>();
     Files.walk(sourcePath).forEach(s->{if (s.toString().endsWith(".java")){src.add(s);}});

     DiagnosticListener<JavaFileObject> dl = (diagnostic)-> System.out.println(diagnostic.getKind() + " " + diagnostic.getMessage(null));
  
     var opts = List.of(
           "--source","24",
           "--enable-preview",
           "-d", classesDir.toString(),
           "--source-path", sourcePath.toString()
     );
       
     JavaCompiler javac = javax.tools.ToolProvider.getSystemJavaCompiler();
     var javacTask = javac.getTask(
          new PrintWriter(System.err),
          javac.getStandardFileManager(dl, null, null),
          dl,
          opts,
          null,
          src.stream().map(path->
               new SimpleJavaFileObject(path.toUri(),JavaFileObject.Kind.SOURCE){
                  public CharSequence getCharContent(boolean ignoreEncodingErrors) {
                     try {
                       return Files.readString(Path.of(toUri()));
                     } catch (IOException e) {
                        throw new RuntimeException(e);
                    }
               }
           }).toList()
     );
     ((com.sun.source.util.JavacTask)javacTask).generate();

}

