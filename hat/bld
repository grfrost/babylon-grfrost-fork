#!/usr/bin/env java --enable-preview --source 24 --class-path bldr/classes
/*
 * Copyright (c) 2024, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

import module java.compiler;
import static bldr.Bldr.*;
void main(String[] args) throws IOException, InterruptedException {
       var hatDir = Path.of(System.getProperty("user.dir"));
        var licensePattern = Pattern.compile("^.*Copyright.*202[4-9].*(Intel|Oracle).*$");
        var eolws = Pattern.compile("^.* $");
        var tab = Pattern.compile("^.*\\t.*");

        paths(hatDir, "hat", "examples", "backends").forEach(dir -> {
            paths(dir, path -> !Pattern.matches("^.*(-debug|rleparser).*$", path.toString())
                       && Pattern.matches("^.*\\.(java|cpp|h|hpp)$", path.toString())
            ).stream().map(path -> new TextFile(path)).forEach(textFile -> {
                if (!textFile.grep(licensePattern)){
                    System.err.println("ERR MISSING LICENSE " + textFile.path());
                }
                textFile.lines().forEach(line -> {
                    if (line.grep(tab)) {
                        System.err.println("ERR TAB " + textFile.path() + ":" + line.line() + "#" + line.num());
                    }
                    if (line.grep(eolws)) {
                        System.err.println("ERR TRAILING WHITESPACE " + textFile.path() + ":" + line.line() + "#" + line.num());
                    }
                });
            });
        });

        var target = mkdir(rmdir(path(hatDir, "build")));
        var hatJavacOpts = List.of(
                "--source", "24",
                "--enable-preview",
                "--add-exports=java.base/jdk.internal=ALL-UNNAMED",
                "--add-exports=java.base/jdk.internal.vm.annotation=ALL-UNNAMED"
        );

        var hatJarResult = javacjar($ -> $
                .opts(hatJavacOpts)
                .jar(path(target, "hat-1.0.jar"))
                .source_path(path(hatDir, "hat/src/main/java"))
        );
        println(hatJarResult.jar);
        for (var exampleDir : paths(path(hatDir, "examples"), "mandel", "squares", "heal", "violajones", "life")) {
            javacjar($ -> $
                    .opts(hatJavacOpts)
                    .jar(path(target, "hat-example-" + exampleDir.getFileName() + "-1.0.jar"))
                    .source_path(path(exampleDir, "src/main/java"))
                    .class_path(hatJarResult.jar)
                    .resource_path(path(exampleDir, "src/main/resources"))
            );
        }
        var backendsDir = path(hatDir, "backends");
        for (var backendDir : paths(backendsDir, "opencl", "ptx")) {
            javacjar($ -> $
                    .opts(hatJavacOpts)
                    .jar(path(target, "hat-backend-" + backendDir.getFileName() + "-1.0.jar"))
                    .source_path(path(backendDir, "src/main/java"))
                    .class_path(hatJarResult.jar)
                    .resource_path(path(backendDir, "src/main/resources"))
            );
        }

        var cmakeBldDebugDir = backendsDir.resolve("bld-debug");
        if (!existingDir(cmakeBldDebugDir)) {
            mkdir(cmakeBldDebugDir);
            cmake($ -> $.cwd(backendsDir)._B(cmakeBldDebugDir).opts("-DHAT_TARGET=" + target));
        }
        cmake($ -> $.cwd(backendsDir).__build(cmakeBldDebugDir));
  } 
